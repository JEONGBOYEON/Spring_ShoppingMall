<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="orderMapper">

<!-- 사용자 기본 배송지 가져오기 -->
<select id="getOrderDest" parameterType="String" resultType="com.codi.dto.DestinationDTO">
	select addrKey,destNickname,destName,zip,addr1,addr2,destPhone,destTel
	from destination where userId=#{userId} and addrKey='yes'
</select>

<!-- 사용자 모든 배송지 정보 가져오기 -->
<select id="getAllDest" parameterType="String" resultType="com.codi.dto.DestinationDTO">
	select destNickname,destName,destPhone,zip,addr1,addr2 ,addrKey
	from destination where userId=#{userId}
</select>

<!-- 사용자 포인트 가져오기 --> 
<select id="getMemberPoint" parameterType="String" resultType="int">
	select point from member where userId=#{userId}
</select>
 
<!-- 사용자 주문 목록 가져오기 -->
<select id="getOrderList" parameterType="String" resultType="com.codi.dto.OrderListDTO">
	select a.*,originalName,saveFileName from
	(select cart.userId userId,cart.productId
	productId,productName,cart.productSize productSize, cart.color color,
	cart.amount amount,cart.price price,superProduct
	from cart,product
	where cart.productId=product.productId
	and userId=#{userId} and orderSelect='yes') a,
	(select productId,originalName,saveFileName from product) b
	where a.superProduct = b.productId
</select>	

<!-- 사용자가 주문한 물품 개수 -->
<select id="getOrderCount" parameterType="String" resultType="int">
	select nvl(count(*),0) from cart 
	where userId=#{userId} and orderSelect='yes'
</select>	

<!-- orderTable에서 오늘 주문한 상품 개수 가져오기 -->
<select id="getMaxNum" resultType="int">
	select nvl(count(distinct orderNum),0) from orderTable where orderDate > to_char(sysdate,'yyyy-mm-dd') 
	order by orderNum desc
</select>

<!-- 주문 데이터 입력-->
<insert id="insertOrderDataProduct" parameterType="com.codi.dto.OrderDTO">
	insert into orderTable (orderNum,userId,productId,amount,price,zip,addr1,addr2,addrKey,eMail,orderDate,payment)
	values (#{orderNum},#{userId},#{productId},#{amount},#{price},#{zip},#{addr1},#{addr2},#{addrKey},#{eMail},sysdate,#{payment})
</insert>	

<!-- 주문 데이터 입력2-->
<insert id="insertOrderPayment" parameterType="hashMap">
	insert into orderPayment (orderNum,userId,price,discount)
	values (#{orderNum},#{userId},#{totalPrice},#{discount})
</insert>	

<!-- 상품 구매개수 추가 -->
<update id="updateProductAcount" parameterType="hashMap">
	update product set amount = amount + #{amount} where productId=#{superProduct}
</update>


<!-- 무통장입금시 주문번호로 아이디 가져오기 -->
<select id="searchUserId" parameterType="String" resultType="String">
	select userId from orderTable 
	where orderNum=#{orderNum} and rownum=1
</select>

<!-- 무통장입금완료시 주문데이터 변경 -->
<update id="updateOrderDataProduct" parameterType="hashMap">
	update orderTable set payment='yes'
	where userId=#{userId} and orderNum=#{orderNum}
</update>

<!-- 무통장 입금 완료시 리뷰 추가 위한 주문 정보 가져오기 -->
 <select id="getOrderNumData" parameterType="String" resultType="com.codi.dto.OrderDTO">
 	select productId from orderTable where orderNum=#{orderNum}
 </select>
 
 
<!-- 주문 성공시 장바구니에서 구매품목 삭제 -->
<delete id="deleteCartProduct" parameterType="hashMap">
	delete cart where userId=#{userId} and productId=#{productId} and orderSelect='yes'
</delete>
	
<!-- 주문 성공시 멤버테이블 포인트 추가 -->	
<update id="updateMemberPoint" parameterType="hashMap">
	update member set point=point+#{point} where userId=#{userId}
</update>

<!-- 포인트 사용시 차감 -->
<update id="updateMemberPointUse" parameterType="hashMap">
	update member set point=point-#{point} where userId=#{userId}
</update>
<!-- orderTable에서 주문 정보 가져오기 -->	
<select id="getCompleteOrder" parameterType="hashMap" resultType="com.codi.dto.OrderDTO">
	select * from 
	(select orderNum,orderDate,userId,orderTable.productId productId,productName,orderTable.zip zip,orderTable.addr1 addr1, 
	orderTable.addr2 addr2,orderTable.addrkey addrkey,orderTable.amount amount,orderTable.price price,email,superProduct 
	from orderTable,product where orderTable.productId = product.productId and userId=#{userId}) a, 
	(select productId,originalName,saveFileName from product) b
	where a.superProduct = b.productId
</select>

<!-- 리뷰 총 개수 -->
<select id="reviewCount" resultType="int">
	select nvl(max(reviewNum),0) from review
</select>

<!-- 리뷰 추가 -->
<insert id="insertReview" parameterType="com.codi.dto.OrderDTO">
	insert into review (reviewNum,userId,productId,reviewDate,writed)
	values (#{reviewNum},#{userId},#{productId},sysdate,'no')
</insert>
	
<!-- 사용자 기간별 주문조회 -->
<select id="getUserOrderLists" parameterType="hashMap" resultType="com.codi.dto.OrderDTO">
	select * from (
	select rownum rnum, data.*, originalName,saveFileName  from (
	select orderNum,to_char(orderDate,'yyyy-mm-dd') orderDate,userId,ordertable.productId productId,productName,zip,addr1,addr2,addrKey,ordertable.amount amount,
	ordertable.price price,eMail,superProduct,payment
	from ordertable,product 
	where ordertable.productId = product.productId 
	and userId=#{userId}
	and to_char(orderDate,'yyyy-mm-dd')>=(select to_char(${searchPeriod} ${num}),'yyyy-mm-dd')
	from dual group by orderNum) 
	order by orderNum desc) 
	data,product where product.productId=data.superProduct) 
<![CDATA[
	where rnum>=#{start}
]]>
</select>

<!-- 사용자 기간변 주문 목록 -->
<select id="getUserOrderNum" parameterType="hashMap" resultType="String">
	select orderNum from (
	select rownum rnum, data.* from (
	select distinct orderNum
	from ordertable
	where userId=#{userId}
	and to_char(orderDate,'yyyy-mm-dd')>=(select to_char(${searchPeriod} ${num}),'yyyy-mm-dd')
	from dual) order by orderNum desc) data) 
<![CDATA[
	where rnum>=#{start} and rnum<=#{end}
]]>
</select>

<!-- 사용자 기간별 주문 양 -->
<select id="getNumUserOrderLists" parameterType="hashMap" resultType="int">
	select nvl(count(distinct orderNum),0)
	from ordertable where userId=#{userId}
	and to_char(orderDate,'yyyy-mm-dd')>=(select to_char(${searchPeriod} ${num}),'yyyy-mm-dd') from dual)
</select>

<!-- 사용자 등급 조정 -->
<select id="gradePoint" parameterType="String" resultType="int">
	select nvl(sum(price*amount),0) sum 
	from orderTable where to_char(orderDate,'yyyy-mm-dd')>=(select to_char(ADD_MONTHS(SYSDATE, -12),'yyyy-mm-dd') from dual)
	and userId=#{userId} and payment='yes'
</select>

<update id="updateGrade" parameterType="hashMap">
	update member set userGrade=#{userGrade} where userId=#{userId}
</update>

<!-- 관리자 무통장입금 확인(주문번호,예금주,가격,주문 개수) -->
<select id="adminPaymentCheck" parameterType="hashMap" resultType="com.codi.dto.AdminPaymentDTO">
	select * from (
	select rownum rnum, data.* from (
	select orderNum, orderTable.userId userId, userName, nvl(sum(orderTable.amount),0) amount,nvl(sum(orderTable.price),0) price
	from orderTable,member,product where orderTable.productId=product.productId and orderTable.userId=member.userId and payment='no'
	group by orderNum,orderTable.userId,userName having userName like '%' || #{searchOrderName} || '%'
	order by orderNum desc) data)
<![CDATA[
	where rnum>=#{start} and rnum<=#{end} order by rnum desc
]]>
</select>

<!-- 관리자 무통장입금 확인(상품명 목록) -->
<select id="adminPaymentCheck2" resultType="com.codi.dto.AdminPaymentDTO">
	select orderNum, productName,orderTable.amount amount
	from orderTable,product where orderTable.productId=product.productId and payment='no'
	order by orderNum desc
</select>

<!-- 무통장입금 주문번호별 개수 -->
<select id="adminPaymentCheckCount" parameterType="String" resultType="int">
	select nvl(count(*),0)
	from orderTable,product where orderTable.productId=product.productId 
	and payment='no' and orderNum=#{orderNum}
</select>

<!-- 무통장입금 총 주문번호 개수 -->
<select id="adminPaymentCheckCountAll" resultType="int">
	select nvl(count(distinct orderNum),0)
	from orderTable,product,member where orderTable.productId=product.productId and orderTable.userId=member.userId 
	and payment='no' and userName like '%' || #{searchOrderName} || '%'
</select>


<!-- 여러개 주문시 이름 설정(□□□ 외 몇 건) -->
<select id="adminPaymentCheckProduct" parameterType="String" resultType="String">
	select productName
	from orderTable,product where orderTable.productId=product.productId and payment='no' 
	and orderNum=#{orderNum} and rownum=1
</select>

<select id="adminDiscountPrice" resultType="com.codi.dto.AdminPaymentDTO">
	select distinct orderNum,price from orderPayment
</select>

</mapper>